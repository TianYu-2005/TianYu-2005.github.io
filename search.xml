<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>密码学原理</title>
      <link href="/2024/09/19/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
      <url>/2024/09/19/%E5%AF%86%E7%A0%81%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="密码学原理"><a href="#密码学原理" class="headerlink" title="密码学原理"></a>密码学原理</h1><hr><h2 id="Lecture-1"><a href="#Lecture-1" class="headerlink" title="Lecture 1"></a>Lecture 1</h2><ul><li>Overview</li><li>Classic cipher: 凯撒密码，弗吉尼亚密码，单字母替换密码</li><li>现代密码与古代密码的比较</li><li>科克霍夫原理：安全性不应该依赖于加密的方法（别人总会知道你加密的方法），而应该依赖于密匙。</li></ul><h2 id="Lecture-2"><a href="#Lecture-2" class="headerlink" title="Lecture 2"></a>Lecture 2</h2><p>一些高中概率知识的复习（古典概率，条件概率，贝叶斯概率）</p><h3 id="perfect-secrecy（完美保密性）"><a href="#perfect-secrecy（完美保密性）" class="headerlink" title="perfect secrecy（完美保密性）"></a>perfect secrecy（完美保密性）</h3><h4 id="如何定义一个密码范式？（encryption-scheme）"><a href="#如何定义一个密码范式？（encryption-scheme）" class="headerlink" title="如何定义一个密码范式？（encryption scheme）"></a>如何定义一个密码范式？（encryption scheme）</h4><ul><li>Gen：k ← Gen（一个产生密匙k的概率算法）</li><li>Enc：一个根据密匙k生成密文c的算法</li><li>Dec：一个输入密文和密匙并算出明文的方法</li></ul><h4 id="完美保密性概念"><a href="#完美保密性概念" class="headerlink" title="完美保密性概念"></a>完美保密性概念</h4><p>Pr[M &#x3D; m|C &#x3D; c] &#x3D; Pr[M &#x3D; m]：即在知道秘闻后的条件概率与知道前没有区别。</p><p>等价形式：Pr[C &#x3D; c|M &#x3D; m] &#x3D; Pr[C &#x3D; c|M &#x3D; m].</p><p>之后讲述了以上两者等价的证明。</p><h4 id="完美不可区分性（perfect-adversarial-indistinguishable）"><a href="#完美不可区分性（perfect-adversarial-indistinguishable）" class="headerlink" title="完美不可区分性（perfect adversarial indistinguishable）"></a>完美不可区分性（perfect adversarial indistinguishable）</h4><p>在一个实验中，adversary从所有明文空间中挑两个然后给加密者，加密者随机等概率加密一个明文并将其返回给adversary。如果adversary猜出此密文所对应明文正确的概率为0.5，则称为完美不可区分性。</p><p>完美不可区分性和完美保密性等价（作业：证明！）</p><p>证明弗吉尼亚密码不符合完美保密性。</p><h4 id="The-One-Time-Pad（OTP）"><a href="#The-One-Time-Pad（OTP）" class="headerlink" title="The One-Time Pad（OTP）"></a>The One-Time Pad（OTP）</h4><p>异或运算可以模拟二进制加法。</p><p>该范式内容如下：明文为一串二进制码，同时生成密匙（长度必须与明文的长度相同），并对二者进行异或运算，得出密文。同时，将密文与密匙再次做异或运算，可以得到明文。</p><p>局限性：</p><ul><li>密匙必须与明文长度相同</li><li>相同的密匙只能用一次才能保证安全</li><li>只能防御密文攻击（如获取了明文那这个方法就废了）</li></ul><h4 id="完美保密性的缺陷"><a href="#完美保密性的缺陷" class="headerlink" title="完美保密性的缺陷"></a>完美保密性的缺陷</h4><p>Let (Gen,Enc,Dec) be a perfectly-secret encryption scheme over a message space M, and let K be the key space as determined by Gen.</p><p>Then |K| ≥ |M|，即密匙的空间必须大于等于明文的空间。</p><h4 id="香农理论（Shannon-‘s-Theorem）"><a href="#香农理论（Shannon-‘s-Theorem）" class="headerlink" title="香农理论（Shannon ‘s Theorem）"></a>香农理论（Shannon ‘s Theorem）</h4><h2 id="Lecture-3-计算保密性（Computational-Security）"><a href="#Lecture-3-计算保密性（Computational-Security）" class="headerlink" title="Lecture 3 计算保密性（Computational Security）"></a>Lecture 3 计算保密性（Computational Security）</h2><p>相对于完美保密性，计算保密性的要求降低一步。</p><h3 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h3><p>Computationally Secure: Efficient adversaries have the information, and can potentially succeed with some very small probability.</p><p>意思是说，也许“有效的”对手可以花费100亿年来破译这个密码，但这样仍然可以成为符合计算保密性。</p><h3 id="计算安全性：A-parameterized-security"><a href="#计算安全性：A-parameterized-security" class="headerlink" title="计算安全性：A parameterized security"></a>计算安全性：A parameterized security</h3><p>通常计算安全性与密钥的长度有关，同时密钥长度的可变提高了密码的灵活性，同时可以根据实际情况降低密码成本。</p><h3 id="Efficient-adversary"><a href="#Efficient-adversary" class="headerlink" title="Efficient adversary"></a>Efficient adversary</h3><p>Efficient adversaries &#x3D; Randomized algorithms + Polynomial-time bounded &#x3D; Probabilistic Polynomial-Time (bounded) algorithms &#x3D; PPT algorithms</p><p>即任意现存可行的算法加上多项式的时间复杂度。</p><h3 id="可忽略函数"><a href="#可忽略函数" class="headerlink" title="可忽略函数"></a>可忽略函数</h3><p>超多项式函数（superpolynomial）：级数大于多项式的函数。<br>可忽略（negligible）函数：超多项式函数的倒数。negl(n).</p><p>规律：</p><ul><li>两个可忽略函数相加仍为可忽略函数</li><li>可忽略函数乘多项式函数也为可忽略函数(公式1)</li></ul><blockquote><p>negligible possibility is safe!（原因见公式1）</p></blockquote><h3 id="The-asymptotic-definition-of-computational-security"><a href="#The-asymptotic-definition-of-computational-security" class="headerlink" title="The asymptotic definition of computational security"></a>The asymptotic definition of computational security</h3><p>A scheme is secure if for every PPT adversary A carrying out an attack of some formally specified type, the probability that A succeeds in the attack is negligible.</p><p>negligible： for every positive polynomial p, there exists an integer N such that when n &gt; N, the probability that A succeeds in the attack is less than 1&#x2F;p(n)。</p>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>最优化方法导论</title>
      <link href="/2024/09/12/%E6%9C%80%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95%E5%AF%BC%E8%AE%BA/"/>
      <url>/2024/09/12/%E6%9C%80%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95%E5%AF%BC%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="最优化方法导论"><a href="#最优化方法导论" class="headerlink" title="最优化方法导论"></a>最优化方法导论</h1><hr><h2 id="Lecture-2-数学基础"><a href="#Lecture-2-数学基础" class="headerlink" title="Lecture 2 数学基础"></a>Lecture 2 数学基础</h2><h3 id="范数"><a href="#范数" class="headerlink" title="范数"></a>范数</h3><p>对于n维向量：</p><ul><li>车比雪夫范数：即n个维度绝对值最大的那个数值。</li><li>p范数：2范数的推广，p次幂后开p次根。</li></ul><p>对于m*n的矩阵：</p><ul><li>sum-absolute-value norm</li><li>Maximum-absolute-value norm</li></ul><p>关于范数的不等式。</p><p>两种特殊的范数：</p><ul><li>Operator norms：当都为欧几里得范数时，它的operator norms就是最大奇异值。</li><li>Dual(对偶) norms：1&#x2F;p + 1&#x2F;q &#x3D; 1; 2范数的对偶范数为核范数（nuclear norm）。</li></ul><h3 id="导数（Derivative）"><a href="#导数（Derivative）" class="headerlink" title="导数（Derivative）"></a>导数（Derivative）</h3><p>好难……</p>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>软件分析</title>
      <link href="/2024/09/12/%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90/"/>
      <url>/2024/09/12/%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 程序分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>互联网计算</title>
      <link href="/2024/09/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>/2024/09/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><h2 id="Lecture-1"><a href="#Lecture-1" class="headerlink" title="Lecture 1"></a>Lecture 1</h2><h3 id="课程介绍"><a href="#课程介绍" class="headerlink" title="课程介绍"></a>课程介绍</h3><p>参考资料：思科网络技术学院教程，计算机网络（第六版）<br>大作业10%，机试30%<del>40%，笔试50%</del>60%</p><h3 id="LAN-local-和WAN-wide"><a href="#LAN-local-和WAN-wide" class="headerlink" title="LAN(local)和WAN(wide)"></a>LAN(local)和WAN(wide)</h3><p>LAN Devices and WAN Devices(搞不清具体是干啥的)</p><p>Ethernet（LAN）和Internet（WAN）  Most Popular</p><blockquote><p>算了算了，这课还是自学罢了，唉。</p></blockquote><h2 id="第一章-计算机网络概述"><a href="#第一章-计算机网络概述" class="headerlink" title="第一章 计算机网络概述"></a>第一章 计算机网络概述</h2><ul><li>网络（network）：网络由若干结点（node）和链路（link）组成。</li><li>互联网&#x2F;互连网（internet）：泛指由多个计算机网络互相连接而形成的网络，这些网络之间</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法</title>
      <link href="/2024/09/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
      <url>/2024/09/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h1><hr><h2 id="Lecture-1"><a href="#Lecture-1" class="headerlink" title="Lecture 1"></a>Lecture 1</h2><p>邮箱：<a href="mailto:&#101;&#121;&#116;&#97;&#110;&#103;&#64;&#x66;&#x6f;&#120;&#x6d;&#x61;&#105;&#x6c;&#46;&#x63;&#111;&#109;">&#101;&#121;&#116;&#97;&#110;&#103;&#64;&#x66;&#x6f;&#120;&#x6d;&#x61;&#105;&#x6c;&#46;&#x63;&#111;&#109;</a></p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><ul><li><strong>逻辑结构</strong>与<strong>物理结构</strong>：逻辑结构为人们所思考的存储方式（树），而物理结构为在硬件上真实的存储方式（线性数组）。这样屏蔽了底层细节，是一种Abstract。</li><li>数据类型，抽象数据结构</li></ul><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><blockquote><p>就是封装，继承，多态</p></blockquote><p>为什么会出现面向对象？ 解决现代工程代码量日渐增加，使用传统编程方式无法应对的问题。</p><p>于是在面向对象思想的指导之下，形成了java等语言。</p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>算法的五大特征：</p><ul><li>有穷性（finite）</li><li>确定性（deterministic）</li><li>有起始动作（输入）</li><li>有终点（输出）</li><li>能行性</li></ul><h3 id="编程思想：递归"><a href="#编程思想：递归" class="headerlink" title="编程思想：递归"></a>编程思想：递归</h3><p>本课程共介绍四种编程思想：递归，分治，贪心，归化</p><blockquote><p>何谓编程思想？不是指具体的算法，而是一种解决思维方式，尤其是没有头绪时。</p></blockquote><p>分为自递归（直接递归）（自己和自己递归）和互递归（间接递归）（几个函数以环的顺序相互调用）</p><p>逻辑层：举了几个例子，包括数组全排列和汉罗塔问题。</p><p>物理层：运行时定义（相当于用户在运行程序时）</p><h3 id="泛型（Generic-Object）"><a href="#泛型（Generic-Object）" class="headerlink" title="泛型（Generic Object）"></a>泛型（Generic Object）</h3><p><strong>复习</strong>：指针与值传递，java的静态方法（不需要实例化就可以调用）和动态方法（要实例化才可以调用），C++ 和 java对象的存储细节，访问权限等等内容。</p><h4 id="大型工程问题：code-clone"><a href="#大型工程问题：code-clone" class="headerlink" title="大型工程问题：code clone"></a>大型工程问题：code clone</h4><p>解决方法：</p><ul><li>C++:使用泛型与模版（template) （此时的代码只相当于一个模版，编译后确定具体的数据类型后再生成完整机器码）</li><li>java:使用Object类；如果遇到了基本类型，可以先转化为包裹类（wrapper class，例如Integer等），然后再放进去。当然，在java5之后java的泛型也变得像C++了。</li></ul><p>泛型现在广泛运用于各种源代码和库中。</p><p>本课程作业：笔试写纸上，实习题写线上网站。</p><h2 id="Lecture-2-算法分析"><a href="#Lecture-2-算法分析" class="headerlink" title="Lecture 2 算法分析"></a>Lecture 2 算法分析</h2><p><strong>即时间复杂度和空间复杂度</strong></p><ul><li>空间复杂度：主要分析栈和堆部分，代码区和常数区可写可不写（考试都算对，但需要写明）</li><li>时间复杂度：首先对五个排序算法（冒泡排序，秩排序，插入排序，选择排序等）进行了分析，特别是数组元素的交换和比较次数，以及最好最坏情况。</li></ul><h3 id="大O表示法"><a href="#大O表示法" class="headerlink" title="大O表示法"></a>大O表示法</h3><p>用O表示时间复杂度的上界，即只要存在一个k，使得kO(n)&gt;时间复杂度。<br>在计算具体的时间复杂度时，可以精细地将所有操作都算上去，但结果都不会变（毕竟只要算个大概就行了）。至于考试，最多也就会考数组元素的所有比较和交换次数，什么i++之类的不用管。</p><h3 id="算法思想：分而治之（divide-and-conquer）"><a href="#算法思想：分而治之（divide-and-conquer）" class="headerlink" title="算法思想：分而治之（divide and conquer）"></a>算法思想：分而治之（divide and conquer）</h3><p>分：把问题分成大致两个相等的子问题，然后递归地对它们求解。<br>治：将两个子问题的解合并到一起，可能再做些少量附加工作，最后得到整个问题的解。</p><p>例子：最大子序列问题（NlogN）</p><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><h4 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h4><ul><li>指令所占空间（机器码，在算法分析中是不算的）</li><li>数据所占空间（）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机组织结构实验</title>
      <link href="/2024/09/06/%E8%AE%A1%E7%BB%84%E5%AE%9E%E9%AA%8C/"/>
      <url>/2024/09/06/%E8%AE%A1%E7%BB%84%E5%AE%9E%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机组织结构实验"><a href="#计算机组织结构实验" class="headerlink" title="计算机组织结构实验"></a>计算机组织结构实验</h1><hr><h2 id="PA0-环境配置与准备部分"><a href="#PA0-环境配置与准备部分" class="headerlink" title="PA0 环境配置与准备部分"></a>PA0 环境配置与准备部分</h2><h3 id="GNU-GCC-LINUX"><a href="#GNU-GCC-LINUX" class="headerlink" title="GNU&#x2F;GCC&#x2F;LINUX?"></a>GNU&#x2F;GCC&#x2F;LINUX?</h3><p>GCC(gnu’s compiler collection),是GNU中的一部分（GNU可以看成一个大的工程），刚开始用于GNU系统中编译C语言，后来经过发展编译范围变大。</p><p>而Linux也可以看作贯彻了GNU思想的操作系统，与GNU这一项目有很多联系。</p><h3 id="采用何种方法搭建Linux环境？"><a href="#采用何种方法搭建Linux环境？" class="headerlink" title="采用何种方法搭建Linux环境？"></a>采用何种方法搭建Linux环境？</h3><p>真机&#x2F;双系统&#x2F;WSL&#x2F;虚拟机；综合考虑性能以及复杂性等多方面因素，我选择了WSL。</p><p>安装过程较为简便，改一些系统设置，应用商店直接下载就可以使用22.04的Ubuntu WSL了。至于Windows terminal已经系统自带了，就不用管了。</p><p>当然，这里偷了个懒，全部默认下到C盘里了，如果要改盘可能操作更复杂。</p><h4 id="LINUX-GUI部分"><a href="#LINUX-GUI部分" class="headerlink" title="LINUX GUI部分"></a>LINUX GUI部分</h4><p>详细步骤见<a href="https://learn.microsoft.com/zh-cn/windows/wsl/tutorials/gui-apps">微软官方文档</a></p><p>apt：即包管理器，可以方便的下载各种linux应用程序，GUI部分的应用程序也靠此实现。</p><p>下面是一些指令：</p><ul><li><strong>wsl</strong> –shutdown ：在powershell中使用，关闭wsl</li><li><strong>gimp</strong>  ： GIMP 是一种免费的开源光栅图形编辑器</li><li><strong>nautilus</strong> ： Nautilus 也称为 GNOME Files，是 GNOME 桌面的文件管理器。</li><li><strong>vlc</strong> ： Nautilus 也称为 GNOME Files，是 GNOME 桌面的文件管理器。</li><li>xclock，xcalc，xeyes，xclipboard ：桌面小工具</li></ul><p>然后先懒得安装桌面了，不知道这东西有啥用。</p><p>开始尝试装桌面，结果把系统玩崩了。。。遂只能重装系统。逆天的CSDN。</p><p>然后linux系统第一次进入root用户状态时，要先输入</p><blockquote><p>sudo passwd</p></blockquote><p>然后再输入一遍密码才行。</p><h3 id="Vim入门"><a href="#Vim入门" class="headerlink" title="Vim入门"></a>Vim入门</h3><p>vim分为三种模式：普通模式，输入模式，底部命令行模式</p><ul><li>刚开始进入时为普通模式，输入i或a或o进入输入模式，而摁esc退回普通模式</li><li>普通模式摁“：”进入底线命令模式，然后回车退出。</li><li>创建文件：eg：vim test.txt</li></ul><h4 id="Vim的基本操作"><a href="#Vim的基本操作" class="headerlink" title="Vim的基本操作"></a>Vim的基本操作</h4><p>在普通模式时（此时有移动，复制粘贴，搜索等功能）：</p><ul><li>移动：hjkl，加ctrl的u和d；0表示移动到此行最前面，$是移动到此行的最后面；G移动到文档的最后一行；gg移动到文档第一行。</li><li>搜索：&#x2F;word在光标之下找word，?word在光标上找word；n表示继续顺向执行前面的搜索程序，N则方向相反。</li><li>取代：:1,$s&#x2F;word1&#x2F;word2&#x2F;g，表示将该行数范围内的word1全部替换成word2.</li><li>删除：x向后删，X向前删。</li><li>复制粘贴：yy复制一整行，p粘贴，dd剪切</li><li>复原与重做：u表示复原，ctrl+r或.表示重做。</li></ul><p>在编辑模式时（分为Insert mode 和 Replace mode）</p><ul><li>i&#x2F;a&#x2F;o及其大写都可以进入Insert模式，分别为前，后，下一行。</li><li>r&#x2F;R取代，小写取代一次，大写一直。</li><li>Esc都是返回普通模式的方法。</li></ul><p>在底部指令行模式时：</p><ul><li>w是保存，q是离开，！是强制，经常放到一起写。</li><li>set nu 有行号，set nonu 无行号。</li></ul><blockquote><p>在vim中注意“数字+指令”代表重复该指令n次</p></blockquote><h3 id="Linux学习"><a href="#Linux学习" class="headerlink" title="Linux学习"></a>Linux学习</h3><p>详见<a href="https://nju-projectn.github.io/ics-pa-gitbook/ics2024/linux.html">此文档</a></p><h4 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h4><ul><li>ls：老东西，蓝色的是文件夹；-lh</li><li>pwd：当前所在目录</li><li>cd：在linux中，.代表该目录自身，..代表上级目录，文件系统的根为&#x2F;</li><li>touch：创建新文件</li><li>cp SOURCE DEST：将source复制为dest；若dest是个文件夹，则将其复制到文件夹之内。</li><li>mv SOURCE DEST：移动命令（当DEST为目录时）；若非目录则相当于重命名。</li><li>mkdir：创建文件夹</li><li>rm FILE：删除文件，-r递归删除文件夹。  -rf强制删除</li><li>man 命令：查看命令的帮助</li><li>cat：查看文件，显示到命令行中。</li><li>grep：grep 指令用于查找内容包含指定的范本样式的文件，如果发现某文件的内容符合所指定的范本样式，grep 指令会把含有范本样式的那一列显示出来。若不指定任何文件名称，或是所给予的文件名为 -，则 grep 指令会从标准输入设备读取数据。<blockquote><p>grep [options] pattern(需要查找的字符串或正则表达式) [files]</p></blockquote></li></ul><blockquote><p>经过我的实战操作，发现cp和mv有点意思；当DEST为文件时，SOURCE必须在当前路径才能完成复制&#x2F;改名任务。</p></blockquote><h4 id="高级操作"><a href="#高级操作" class="headerlink" title="高级操作"></a>高级操作</h4><ul><li>使用管道符 | 进行行数统计：du -sc &#x2F;usr&#x2F;share&#x2F;* | sort -nr | more，管道符将前面部分的输出当输入参数传给后面的命令</li><li>使用vim编程，神奇的gcc -o!。注意，可执行文件是绿色的，而且执行该程序时一定要加上.&#x2F;，以免系统误判为自带可执行程序。</li><li>使用重定向符”&gt;”(输出重定向) or “&lt;”(输入重定向)，所以可以将结果直接导入文件中或者利用其进行文件复制等操作。</li><li>使用objdump进行反编译：objdump -d.</li></ul><h4 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h4><p>详见<a href="https://seisman.github.io/how-to-write-makefile/index.html">该文档</a></p><p>看到这里，终于明白为什么原来要去写Cmake了。<br>一个Makefile文件中递归地包含目标文件及其依赖项，以及相应的指令（必须在前面先输入Tab），是用Linux编写大型工程的必备工具。</p><p>接下来是一个Makefile的范式：</p><blockquote><p>hello:hello.c</p><p>gcc hello.c -o hello    # 注意开头的tab, 而不是空格</p><p>.PHONY: clean</p><p>clean:</p><p>rm hello    # 注意开头的tab, 而不是空格</p></blockquote><p>执行指令：make</p><p>清理指令：make clean</p><p><strong>此外，你需要通过man来自己获取帮助解决问题！</strong></p><h3 id="git学习"><a href="#git学习" class="headerlink" title="git学习"></a>git学习</h3><p>在使用apt-get下载并修改了一些configuration后，开始使用git；</p><p>首先需要在项目文件夹中先git init，此时该文件夹才成为一个git repository。</p><p>使用git log查看原来所有的存档，使用git status查看现在代码相较于上个版本的变化状态。</p><p>使用git add进行追踪添加，其中可以修改.gitignore文件来忽略非必要文件，最后git commit才算真正提交。</p><p>通过git reset –hashcode 进行读档，但过去的未来在此刻失效。</p><p>git branch可以查看所有分支，分支可以解决以上失效问题。所以读档也可以直接git checkout hashcode，此时处于一个虚构分支。还可以切换分支，将代码保存到新分支。</p><h3 id="获取实验代码"><a href="#获取实验代码" class="headerlink" title="获取实验代码"></a>获取实验代码</h3><p>在git clone前需要先进行身份认证，这里统一使用ssh key，但紧随其后就遇到了问题：</p><blockquote><p>ssh: connect to host github.com port 22: Connection refused     &#x2F;&#x2F;应该是github将端口22屏蔽了的问题</p></blockquote><p>STFW后，发现在该目录下加一个config文件，将端口号调到443即可。</p><blockquote><p>注释：关于tree的用法</p><p>只显示一层：tree -L 1;</p><p>颜色区分：tree -L 3 -C</p><p>显示权限：-p；显示相对路径：-f</p></blockquote><p>将文件clone到工作路径后，就要去在nume目录下进行编译。在此之前，先要执行make menuconfig命令，创建一个config文件。当然，这样直接做会报错：</p><blockquote><p>make: *** No rule to make target ‘menuconfig’.  Stop.</p></blockquote><p>STFW后，首先装了一个linux的kernel，然后依然报错：</p><blockquote><p>make[1]: bison: No such file or directory </p><p>make[1]: *** [Makefile:32: build&#x2F;parser.tab.h] Error 127 make: *** [&#x2F;home&#x2F;tianyu&#x2F;ics2024&#x2F;nemu&#x2F;scripts&#x2F;config.mk:39: &#x2F;home&#x2F;tianyu&#x2F;ics2024&#x2F;nemu&#x2F;tools&#x2F;kconfig&#x2F;build&#x2F;mconf] Error 2</p></blockquote><p>于是接着apt-get下载了这两个工具，终于可以make了。</p><p>另外可以通过make clean清除生成的可执行文件。</p><h4 id="一些git操作的补充"><a href="#一些git操作的补充" class="headerlink" title="一些git操作的补充"></a>一些git操作的补充</h4><p>在此章节中，还提及了git branch，git log，git status，git add，git commit等相关指令，然后说本实验要通过git log跟踪。</p><p>但我尚且不太了解这些指令的细节，以后再学习一下吧。</p><h4 id="PA的提交"><a href="#PA的提交" class="headerlink" title="PA的提交"></a>PA的提交</h4><p>首先要设置token环境变量，使用export可以暂时性修改。</p><p>关于linux的环境变量，可以使用指令“env”显示出所有；同时环境变量分为用户级和系统级，分别放在~&#x2F;.以及&#x2F;etc&#x2F;下面。如果要永久性修改，那就要vim相关文件进行修改。</p><p>然后使用make commit就行。</p><hr><h2 id="PA1-开天辟地的篇章：最简单的计算机"><a href="#PA1-开天辟地的篇章：最简单的计算机" class="headerlink" title="PA1 开天辟地的篇章：最简单的计算机"></a>PA1 开天辟地的篇章：最简单的计算机</h2><h3 id="PA之旅之前的事情"><a href="#PA之旅之前的事情" class="headerlink" title="PA之旅之前的事情"></a>PA之旅之前的事情</h3><p>首先，我们先要将PA0的分支合并进入master，然后创造一个PA1的分支。具体代码如下：</p><blockquote><p>git commit –allow-empty -am “before starting pa1”<br>git checkout master<br>git merge pa0<br>git checkout -b pa1   </p></blockquote><p>然后，我们启动了项目中的一个名为“FCEUX”的红白机，阅读了README操作后，加入游戏的ROM文件即可运行MARIO。</p><p>然后按要求检测了按键，画面和声音，发现都没有问题。</p><h4 id="关于编译"><a href="#关于编译" class="headerlink" title="关于编译"></a>关于编译</h4><p>在linux中，我们通常直接make来编译。然而，make默认使用单线程执行程序。<br>所以，我们可以在make后加入-j？这个参数，从而进行多核多线程编译。</p><p>当然，对于同一个项目的编译，还有更快的方式：下载ccache后再进行编译。ccache会将上次编译的信息缓存起来，所以即使make clean后再次make编译，也会发现速度非常快。</p><h4 id="关于ISA（指令集构架）"><a href="#关于ISA（指令集构架）" class="headerlink" title="关于ISA（指令集构架）"></a>关于ISA（指令集构架）</h4><ul><li>x86：用于计算机，性能和兼容性较好。</li><li>RISK-V：RISC-V 架构是基于 精简指令集计算（RISC）原理建立的开放指令集架构。基于RISC-V 指令集架构可以设计服务器CPU，家用电器CPU，工控CPU和用在比指头小的传感器中的CPU。</li><li>MIPS：MIPS架构是一种采取 精简指令集（RISC）的处理器架构。如今基于该架构的芯片广泛被使用在许多电子产品、网络设备、个人娱乐装置与商业装置上。</li><li>ARM: ARM架构是一个32位精简指令集处理器架构，其广泛地使用在许多嵌入式系统设计。由于节能的特点，ARM处理器非常适用于移动通讯领域，符合其主要设计目标为低耗电的特性。</li></ul><p><strong>何为ISA</strong>: ISA是<strong>软件和硬件之间的接口</strong>。如果一个程序要在特定架构的计算机上运行, 那么这个程序和计算机就必须是符合同一套<strong>规范</strong>才行.因此, ISA的本质就是类似这样的规范. 所以ISA的存在形式既不是硬件电路, 也不是软件代码, 而是一本规范手册.</p><p>然而，按照要求，我必须选择riskv32才可以。</p><h3 id="开天辟地的章节"><a href="#开天辟地的章节" class="headerlink" title="开天辟地的章节"></a>开天辟地的章节</h3><p>本章节告诉了我们“如何用程序模拟一个计算机”以及“从状态机的角度去理解计算机和程序”。</p><p>计算机硬件可以看为时序逻辑部件（内存，寄存器，PC）和组合逻辑部件（加法器）这二者的组合。<br>程序以及指令的执行就是在计算机可能的N个状态空间中来回改变状态。</p><h3 id="RTFSC"><a href="#RTFSC" class="headerlink" title="RTFSC"></a>RTFSC</h3><p>OH, I have to read the fucking source code!</p><h4 id="框架代码初探"><a href="#框架代码初探" class="headerlink" title="框架代码初探"></a>框架代码初探</h4><p>现在我们只需要关注nemu这一个小项目即可：nemu由四个部分组成，分别为monitor（读取计算机状态，与linux交互，负责调试），CPU，内存，设备。</p><p>除了nemu&#x2F;src&#x2F;isa&#x2F;目录下代码与ISA有关，其余都无关。</p><h4 id="配置系统"><a href="#配置系统" class="headerlink" title="配置系统"></a>配置系统</h4><p>在一个有一定规模的项目中, 可配置选项的数量可能会非常多, 而且配置选项之间可能会存在关联, 比如打开配置选项A之后, 配置选项B就必须是某个值. 直接让开发者去管理这些配置选项是很容易出错的。<br>所以，我们诞生了配置系统来解决这一问题。</p><p>NEMU的配置系统存在于nemu&#x2F;tool&#x2F;kconfig中，kconfig定义了一套语言，这些语句可以用来编写“配置描述文件”。而在nemu中，所有配置描述文件均为Kconfig。</p><p>在执行<strong>make menuconfig</strong>之后，会根据这些配置描述文件以及用户在配置选择界面的选择修改config，同时在对应的地方生成相应文件。目前，我们只需要关系一下两个文件。</p><ul><li>nemu&#x2F;include&#x2F;generated&#x2F;autoconf.h, 阅读C代码时使用，可以被包含到C代码中的宏定义，宏的形式为CONFIG_XXX</li><li>nemu&#x2F;include&#x2F;config&#x2F;auto.conf, 阅读Makefile时使用，可以被包含到MAKEFILE中的变量</li></ul><h4 id="项目构建和MAKEFILE"><a href="#项目构建和MAKEFILE" class="headerlink" title="项目构建和MAKEFILE"></a>项目构建和MAKEFILE</h4><ul><li>makefile与配置系统关联。  </li><li>文件列表（filelist）决定了最终参与编译的源文件，它们会根据menuconfig的结果修改四个与是否编译某文件相关的变量。</li><li>Makefile的编译规则在nemu&#x2F;scripts&#x2F;build.mk中定义。</li></ul><p>接下来将科普一下可以带来自动化编译的make家族：</p><blockquote><p>make是一个命令工具，用于解释makefile中指令的工具。make命令执行时，需要一个makefile文件，以告诉make命令需要怎么样的去编译和链接程序。<br>而关于.mk文件，则可以看成“特殊的”makefile文件。二者的语法有一定不同。<br>$@  表示目标文件<br>$^  表示所有的依赖文件<br>$&lt;  表示第一个依赖文件<br>$?  表示比目标还要新的依赖文件列表<br>% 相当于正则表达式中的通配符</p></blockquote><p>但具体那个.mk文件也没怎么看懂（似乎有看懂了，只是用一堆宏替换了正常linux命令），要用到再说吧。</p><h4 id="代码解释与理解"><a href="#代码解释与理解" class="headerlink" title="代码解释与理解"></a>代码解释与理解</h4><p>此部分主要解释程序执行后的调用关系和顺序，主要为以后的实验做铺垫。</p><p>同时，关于断言assert（）：首先会计算括号内表达式的值，然后如果值为零就会输出assert error并且abort停止程序。所以在删除assert（0）后，执行make run指令，就可以成功<br>初始化nemu了，此时进入了monitor的监视状态（处于monitor的funcloop中）；输入c，就进入了cpuloop，执行系统默认的内置程序；如果要退出则摁q。</p><p>但一行行看代码实在没有效率，于是我们可以借助GDB解决这一问题（PA0不应该偷懒的呜呜）；同时那个vim也要好好配一下了，看得我眼花。</p><p>唉，去还债了！</p><h4 id="tmux学习"><a href="#tmux学习" class="headerlink" title="tmux学习"></a><a href="https://zhuanlan.zhihu.com/p/90464490">tmux学习</a></h4><p>这是一个神奇的工具，可以做到任务（session）和窗口的分离（原来是一退出窗口任务就停止执行了，现在是可以让任务在后台运行）。<br>同时，tmux还可以分屏（pane），这才是最重要的！（感觉管用的在这里，上面那个window和session没搞太清有什么用）。</p><p>记录一下常用指令与快捷键：</p><ul><li>tmux ls 查看所有会话</li><li>ctrl+d 回退</li><li>tmux split-pane (-h:左右)  上下分屏</li></ul><p>另外，在tmux.conf里加一句：（可以实现鼠标选中窗格和移动） set -g mouse on</p><h4 id="GDB学习"><a href="#GDB学习" class="headerlink" title="GDB学习"></a><a href="https://blog.csdn.net/weixin_45031801/article/details/134399664">GDB学习</a></h4><p>直接去看上面的文章就好了，下面记录几个重要的操作：   </p><ul><li>源文件的编译：gcc -o 目标文件名 源文件名 -g（不加上的话会成为release版本，无法debug）</li><li>开始调试：gdb 可执行文件名</li><li>打断点：b 行号；或者 b 源文件：函数名（在该函数第一行打上断点）；</li><li>查看断点信息：info b</li><li>删除断点：d 断点<strong>编号</strong></li><li>逐过程：n</li><li>逐步骤：s</li><li>改动变量：set var xxx&#x3D;xxx</li><li>跟踪变量：display ；取消：undisplay 变量名<strong>编号</strong></li><li>打印变量：p</li><li>查看函数调用过程：bt</li><li>执行至第一个断点：r</li><li>到下一个断点：c</li><li>进行指定位置代码跳转：until + 行号</li><li>直接执行到函数的末尾：finish</li></ul><blockquote><p>在vim中用：set number的方法开启行号（此问题已经通过更改&#x2F;etc&#x2F;vim&#x2F;vimrc文件解决）</p></blockquote><h2 id="C语言拾遗"><a href="#C语言拾遗" class="headerlink" title="C语言拾遗"></a>C语言拾遗</h2><h3 id="C语言从源码到可执行文件"><a href="#C语言从源码到可执行文件" class="headerlink" title="C语言从源码到可执行文件"></a>C语言从源码到可执行文件</h3><p>在IDE中，这只是一个按钮的事情。实际上，这是一个复杂的问题。</p>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机数学建模笔记</title>
      <link href="/2024/09/04/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
      <url>/2024/09/04/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机数学建模"><a href="#计算机数学建模" class="headerlink" title="计算机数学建模"></a>计算机数学建模</h1><hr>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机组织结构</title>
      <link href="/2024/09/03/%E8%AE%A1%E7%BB%84/"/>
      <url>/2024/09/03/%E8%AE%A1%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机组织结构"><a href="#计算机组织结构" class="headerlink" title="计算机组织结构"></a>计算机组织结构</h1><hr><h2 id="Lecture-1"><a href="#Lecture-1" class="headerlink" title="Lecture 1"></a>Lecture 1</h2><h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><p>计算机：通用，电子，数字</p><p><strong>组织</strong>（Organization）：对编程人员不可见（编程时能不能感受到差异）（实现乘法是用过硬件单元还是重复加法？）</p><p><strong>结构</strong>（Architecture）：对编程人员可见（是否有乘法指令？）<br>二者并没有完全的关联，可以一个相同，另一个不同。</p><h3 id="冯洛伊曼结构"><a href="#冯洛伊曼结构" class="headerlink" title="冯洛伊曼结构"></a>冯洛伊曼结构</h3><p>处理单元，控制单元，存储器，IO</p><p>思想：指令和数据以同等地位存放在存储器内，并可以按地址访问（解决了早期靠纯人工操作的速度劣势问题）；指令和数据均使用二进制表示。</p><p>计算机简史：</p><ul><li>真空管</li><li>晶体管</li><li>集成电路</li></ul><p>摩尔定律：单芯片上所能包含的晶体管数量每18个月翻一番。<br>影响：</p><h3 id="计算机性能"><a href="#计算机性能" class="headerlink" title="计算机性能"></a>计算机性能</h3><p>主要考虑CPU性能：</p><ul><li>时钟频率：单位时间内执行最基本操作的次数（HZ）</li><li>时钟周期：时钟频率的倒数</li><li>CPI：执行指定类型指令所需的周期数（可加权平均求总的）</li><li>MIPS: Million Instruction Per Second</li><li>MFLOPS: Million Floating Point Operation per second （浮点数加法）</li><li>利用基准程序衡量：算术平均与调和平均</li></ul><h2 id="Lecture-2"><a href="#Lecture-2" class="headerlink" title="Lecture 2"></a>Lecture 2</h2><h3 id="计算机部件顶层视图"><a href="#计算机部件顶层视图" class="headerlink" title="计算机部件顶层视图"></a>计算机部件顶层视图</h3><h4 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h4><p>包含控制单元（控制整个机器）和运算单元；<br>问题：内存墙（使用高速缓存Cache）；中断机制（循序和嵌套）；</p><h4 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h4><p>在冯诺依曼模型中，仅指内存，外存属于IO部分。<br>内存（主存）：存储数据和指令；<br>问题：传输速率；解决：层次性内存结构（平衡了速度与成本）。</p><h4 id="I-O模块"><a href="#I-O模块" class="headerlink" title="I&#x2F;O模块"></a>I&#x2F;O模块</h4><p>在冯诺依曼模型中，I&#x2F;O并非指显示器鼠标之流，而是接口（如typeC）以及计算机内部的处理I&#x2F;O的部分。<br>速率问题的解决方案：采用缓冲区（快或慢均可以解决）和改进I&#x2F;O技术。</p><h4 id="总线（bus）（解决了部件互联复杂的问题）"><a href="#总线（bus）（解决了部件互联复杂的问题）" class="headerlink" title="总线（bus）（解决了部件互联复杂的问题）"></a>总线（bus）（解决了部件互联复杂的问题）</h4><p>互联两个及以上设备。(类似城市交通体系，一条主路和众多分路)<br>总线类型：</p><ul><li>数据传输类型：控制线（不可复用），地址线，数据线（可以复用来传非数据）</li></ul><blockquote><p>总之，在冯诺依曼模型中存在着一系列问题，而本课程刚好解决这些问题。</p></blockquote><h3 id="数据的机器级表示"><a href="#数据的机器级表示" class="headerlink" title="数据的机器级表示"></a>数据的机器级表示</h3><h4 id="补码的进一步讨论"><a href="#补码的进一步讨论" class="headerlink" title="补码的进一步讨论"></a>补码的进一步讨论</h4><p>在补码中，互为相反数的补码相加刚好为2^k,所以是取反加一。</p><p>补码的产生方式：本来表示2^k个数即0~2^k-1,现在将大于等于2^k-1 的数全部向数轴左边负半轴方向挪过去。</p><p>原码：数轴正半轴右半边旋转平移到负半轴。</p><p>移码：整体向负半轴平移（浮点数）</p><h4 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h4><ul><li>规格化数：阶码（E 8位），尾数（S 23位）。可以通过“插旗子”的方法理解，旗子的密度逐渐降低（但在2的倍数范围内密度相当），满足了表示范围和精度之间的平衡。</li></ul><p>然而，规格化最小可以表示到2^-127，有部分数值表示不到。因此产生了非规格化数。</p><ul><li>非规格化：将贴近零附近的一段小旗均匀铺展到零；同时补充了正负零和正负无穷。</li></ul><h4 id="舍入（rounding）"><a href="#舍入（rounding）" class="headerlink" title="舍入（rounding）"></a>舍入（rounding）</h4><p>用靠近真值的浮点数代替；</p><ul><li>就近舍入（看着合理，但是麻烦）</li><li>朝正无穷舍入（尾数掐掉&#x2F;向前进一位）</li><li>朝负无穷舍入</li><li>朝0舍入（直接全部掐掉）</li></ul><h3 id="内部存储器"><a href="#内部存储器" class="headerlink" title="内部存储器"></a>内部存储器</h3><h4 id="错误（Error）"><a href="#错误（Error）" class="headerlink" title="错误（Error）"></a>错误（Error）</h4><p>软错误和硬错误；</p><p>错误的发现与纠正；（当然是发现更难）</p><p>解决方法：在数据串后面接一串通过函数f产生的编码然后传送，之后将收到的数据根据f再度生成编码，然后进行比较。</p><ul><li>奇偶校验码：只用统计数据中1的个数的奇偶性，然后在最后加一位。（可对于较短数据纠正）。</li></ul><p>奇校验：数据所有位异或后再异或一个1。校验码和数据中1的个数和必为奇数。</p><p>偶校验：不用再多异或一个1了。校验码和数据中1的个数和必为偶数。</p><h4 id="海明码（假设最多1位发生错误）"><a href="#海明码（假设最多1位发生错误）" class="headerlink" title="海明码（假设最多1位发生错误）"></a>海明码（假设最多1位发生错误）</h4><p>将M位的数据（D）分成K组，分别对每组进行奇偶校验，得到一个K位的校验码（C）。将数据发过去后再次求海明码，然后将两个海明码求异或得出“故障字”。</p><p>K位的校验码最多表示2^k种情况，同时在最多1位发生错误的前提下数据一共有M+K+1种情况，所以理论上只要2^k &gt;&#x3D; M+K+1即可。</p><p>所以接下来要做的就是分配不同校验码所对应的出错情况，为了充分利用，D<sub>i</sub> 可能出现在多个分组中。</p><h4 id="循环冗余校验码（CRC）"><a href="#循环冗余校验码（CRC）" class="headerlink" title="循环冗余校验码（CRC）"></a>循环冗余校验码（CRC）</h4><h3 id="算术逻辑单元（ALU）"><a href="#算术逻辑单元（ALU）" class="headerlink" title="算术逻辑单元（ALU）"></a>算术逻辑单元（ALU）</h3><h4 id="全加器"><a href="#全加器" class="headerlink" title="全加器"></a>全加器</h4><p>与门&#x2F;或门延迟：1ty</p><p>异或门延迟：3ty</p><p>所以算进位（Carryout,C<sub>i</sub>）时根据电路结构延迟为2ty；  </p><p>算第i位和的结果S<sub>i</sub>同理为6ty；</p><p>（利用异或求加法，记得别忘记上一位的进位！）</p><h4 id="全先行进位加法器（CLA）"><a href="#全先行进位加法器（CLA）" class="headerlink" title="全先行进位加法器（CLA）"></a>全先行进位加法器（CLA）</h4><p>延迟：1+2+3&#x3D;6ty</p><h4 id="半先行进位加法器"><a href="#半先行进位加法器" class="headerlink" title="半先行进位加法器"></a>半先行进位加法器</h4><p>由多个CLA串联形成。</p><h4 id="加法和减法的溢出判断"><a href="#加法和减法的溢出判断" class="headerlink" title="加法和减法的溢出判断"></a>加法和减法的溢出判断</h4><p>见PPT</p><h4 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h4><hr><h2 id="作业部分"><a href="#作业部分" class="headerlink" title="作业部分"></a>作业部分</h2><h3 id="homework2"><a href="#homework2" class="headerlink" title="homework2"></a>homework2</h3><ul><li>奇偶校验的快速判断</li><li><a href="https://blog.csdn.net/konley233/article/details/108134466">海明校验码的具体计算方法</a></li><li><a href="https://blog.csdn.net/weixin_44256803/article/details/105805628">循环冗余校验码</a>;注意，<strong>二进制的除法和模二除法是不一样的</strong>。</li><li>浮点数的规格化和非规格化表示方式：规格化的阶码范围为[1,254],全为1的时候为正负无穷，全为0时为正负零或非规格化（但仍然是-126次方）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python基础语法一</title>
      <link href="/2024/08/30/%E5%85%A5%E9%97%A8%E8%87%AA%E5%AD%A6/"/>
      <url>/2024/08/30/%E5%85%A5%E9%97%A8%E8%87%AA%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="Basic-knowledge-of-python"><a href="#Basic-knowledge-of-python" class="headerlink" title="Basic knowledge of python"></a>Basic knowledge of python</h1><blockquote><p>以黑马视屏为大纲（人家的课是真的通俗易懂）<br>与C语言差异较大的地方会标黑</p></blockquote><h2 id="基本数据与操作"><a href="#基本数据与操作" class="headerlink" title="基本数据与操作"></a>基本数据与操作</h2><h4 id="输出print"><a href="#输出print" class="headerlink" title="输出print"></a>输出print</h4><p>print(“date”, end &#x3D; ‘ ‘)<br>print(str * 3)  # print(str1 + str2)</p><h4 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h4><p>整形浮点字符串  “string”  相当于C中的常量</p><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>这里是注释(单行)<br>“”” 多行注释”””</p><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p><strong>声明时不用写数据类型!</strong><br>其余与C类似: num &#x3D; num - 10</p><p>type(变量或常量名)：显示数据类型： type_num &#x3D; type(66)</p><p>print可以打印多个信息，只要用，隔开  （字符串双引号括起）</p><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><p>int()  float()  str()<br>万物皆可””变字符串<br>浮点转整数会丢失小数部分</p><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><p>&#x2F; : 数学意义上的除<br>&#x2F;&#x2F; : 除之后取整(9&#x2F;&#x2F;2 &#x3D; 4  9.0 &#x2F;&#x2F; 2.0 &#x3D; 4)<br>** :指数 2**3<br>同样可以+&#x3D; &#x2F;&#x3D; &#x2F;&#x2F;&#x3D; **&#x3D; ect.</p><h4 id="字符串的定义"><a href="#字符串的定义" class="headerlink" title="字符串的定义"></a>字符串的定义</h4><p>‘string’or “string” or “””string””” (这种要有变量接受时才作为字符串否则为注释)</p><p>若字符串本身包含引号:用不同的引号或者用: “&quot;南京大学&quot;“</p><h4 id="字符串的操作"><a href="#字符串的操作" class="headerlink" title="字符串的操作"></a>字符串的操作</h4><ul><li>&#x3D;&#x3D;拼接&#x3D;&#x3D;: 使用’+’即可  但只能对字符串本身拼接, 且拼接输出是没有空格的,而’,’print有个空格</li><li>&#x3D;&#x3D;字符串格式化&#x3D;&#x3D;: “%d” “%f” “%s”  但数字可以用%s占<br>      同时也支持C语言中的精度占位控制  %6.4f<br>      或在字符串前面加上‘f’，字符串中{}里面写变量名（f“string{name}”）<br>      当然，% 后面（or {in}）的变量名可以替换为表达式</li></ul><h4 id="input的使用"><a href="#input的使用" class="headerlink" title="input的使用"></a>input的使用</h4><p>num &#x3D; input(“提示词,有print的功能”)<br>但注意,所以input&#x3D;&#x3D;都会成为字符串的数据类型&#x3D;&#x3D;,所以有时要进行转换.<br>num &#x3D; int(num)<br>注意，input一般会读一行的词，所以要读空格分割的数就要用spilt函数，成一个list，对list[n]操作。</p><h2 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h2><h4 id="bool类型"><a href="#bool类型" class="headerlink" title="bool类型"></a>bool类型</h4><p>定义与其他类型一样 num &#x3D; true(字面量) || 或num &#x3D; 3 &gt; 5(比较运算式)<br>比较运算符与C相同</p><h4 id="if-else-elif"><a href="#if-else-elif" class="headerlink" title="if else elif"></a>if else elif</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">50</span></span><br><span class="line">count = <span class="number">30</span></span><br><span class="line"><span class="keyword">if</span> num &gt;= <span class="number">30</span>:</span><br><span class="line">    <span class="built_in">print</span>(yes)</span><br><span class="line">    num+=<span class="number">10</span></span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">90</span>:</span><br><span class="line">        count++</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        count--</span><br><span class="line"><span class="keyword">elif</span>:</span><br><span class="line">    num--</span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">88</span>:</span><br><span class="line">        <span class="built_in">print</span>(i see)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(no)</span><br><span class="line"><span class="comment"># 别忘记冒号，还有python是用缩进控制的, if后面的条件判断与C相似</span></span><br></pre></td></tr></table></figure><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">9</span>:</span><br><span class="line">    i++</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> j &lt; <span class="number">10</span>:</span><br><span class="line">        j++</span><br><span class="line"><span class="comment"># next codeline</span></span><br></pre></td></tr></table></figure><h4 id="for-与C相差较大的一部分"><a href="#for-与C相差较大的一部分" class="headerlink" title="&#x3D;&#x3D;for(与C相差较大的一部分)&#x3D;&#x3D;"></a>&#x3D;&#x3D;for(与C相差较大的一部分)&#x3D;&#x3D;</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 临时变量 <span class="keyword">in</span> 序列类型:</span><br><span class="line">    codes...</span><br><span class="line"></span><br><span class="line">序列类型: <span class="string">&quot;string&quot;</span>  <span class="built_in">range</span>(<span class="number">5</span>):01234  <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>): <span class="number">12345</span>  <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">7</span>,<span class="number">2</span>):<span class="number">135</span></span><br><span class="line"></span><br><span class="line">另外:临时变量理论上作用域只在<span class="keyword">for</span>里面,但python中可以在循环外面使用</span><br><span class="line">(但如果要这么办,最好在循环外面先声明一下)</span><br><span class="line">而且,python没有屏蔽重名变量,里外两个i会相互影响</span><br></pre></td></tr></table></figure><ul><li>break和continue:用法与C 一致</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func_name</span>(<span class="params">parameter_1, parameter_2</span>):</span><br><span class="line">    codes</span><br><span class="line">    (<span class="keyword">return</span> something)</span><br></pre></td></tr></table></figure><p>若不写return，则自动返回None</p><ul><li><p>usage of None:<br>None is included in “Nonetype”, and equals to flase in booltype(so we can write “if not None:”).<br>We can use it to initialize a variable , if , and return of function.</p></li><li><p>当然，python中的函数还是遵守局部和全局变量的，局部变量可以加global变全局。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">100</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    num = <span class="number">200</span>     <span class="comment"># 此时的num就是外面的num了</span></span><br><span class="line"><span class="built_in">print</span>(num)    <span class="comment"># 会输出200（不用global还是输出100）</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="一些骚操作"><a href="#一些骚操作" class="headerlink" title="一些骚操作"></a>一些骚操作</h4><ul><li>函数的实参(argument)可以改顺序</li><li>函数可以设置默认值<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum</span>(<span class="params">arg1, arg2</span>):</span><br><span class="line">    codes</span><br><span class="line">    <span class="keyword">return</span> </span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span>(arg2 = <span class="number">5</span>, arg1 = <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sum</span>(<span class="params">arg1 = <span class="number">5</span>, arg2</span>):</span><br><span class="line">    codes</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"><span class="comment"># 此时可以不输入arg1，这样就默认5</span></span><br></pre></td></tr></table></figure></li><li>可以返回多个值（C和java不行）<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    codes</span><br></pre></td></tr></table></figure></li></ul><h4 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h4><h2 id="数据容器"><a href="#数据容器" class="headerlink" title="数据容器"></a>数据容器</h2><p>分类：列表list，元组tuple，字符串str，集合set，字典dict</p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>list &#x3D; []  空列表<br>list &#x3D; [‘dhjsk’,’dre’,’ee’]<br>print(list)<br>[‘dhjsk’,’dre’,’ee’]  字面量<br> 列表可以存储多种数据类型<br> 所以可以嵌套  [[1,2,3],[4,5,6]]</p><h4 id="下标索引"><a href="#下标索引" class="headerlink" title="下标索引"></a>下标索引</h4><p>从左往右：从0开始<br>从右向左：-1开始递减<br>嵌套：list[1][0]: 4</p><h4 id="常规操作"><a href="#常规操作" class="headerlink" title="常规操作"></a>常规操作</h4><ul><li>class：如果将函数定义为class（类）的成员，那么函数会被称为方法。</li><li>方法和函数功能以及特性一样，只是使用格式不同：student &#x3D; Student(); num &#x3D; student.add(1,2)</li></ul><p>mylist &#x3D; [‘dhjsk’,’dre’,’ee’]</p><ol><li>查找某元素的下标<br>index &#x3D; mylist.index(‘ee’)</li><li>通过索引改元素的值</li><li>插入元素<br>mylist.insert(1,’nju’)   插到了1到2之间</li><li>追加元素: mylist.append(‘pku’)<br>只可能在末尾<br>或者追加一批：mylist.extend([4,5,6])</li><li>删除：<br>del mylist[2]<br>mylist.pop(下标)<br>mylist.remove(2)    ## 删掉第一个该元素<br>mylist.clear()</li><li>统计<br>mylist.count(1)   ## 统计1的个数<br>len(mylist)  ## 统计总长度</li></ol><p>遍历：while ； for 临时变量 in 数据容器</p><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><p>可以存多个不同类型元素，但不可以篡改：<br>使用()定义<br>t1 &#x3D; (1,2,3)<br>t2 &#x3D; tuple()<br>定义单个元素时，要在后面加个，<br>可嵌套；</p><p>取值：num &#x3D; t1[1][2]  ; the same with list</p><p>可以操作：<br>t1.index(元素)<br>t1.count(元素)<br>len(t2)</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>从数据容器的角度看：</p><ul><li>支持下标索引（正向和反向）</li><li>是个不可修改的！</li></ul><h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><ol><li>子串替换：<br>new_my_str &#x3D; my_str.replace(‘nju’,’pku’)</li><li>字符串分割：str.split(“”): 将字符串分割并存为list</li><li>去除操作：str.strip(“字符串”)：<br>去前后指定的字符串：按单个字符<br>注：当参数为空时，默认去空格；</li><li>统计某字符串出现的次数：str.count(“it”)</li><li>len(str)</li></ol><h3 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h3><p>一类数据容器：内容连续，有序，可以使用下标索引；上面学的都是。</p><h4 id="序列切片"><a href="#序列切片" class="headerlink" title="序列切片"></a>序列切片</h4><p>序列[起始(包含本身):结束(不包含本身):步长(可以是负数,意味着从后向前取)]<br>list &#x3D; [1,2,3,4]<br>result &#x3D; list<a href="%E4%B8%8D%E5%86%99%E4%BB%A3%E8%A1%A8%E4%BB%8E%E5%A4%B4%E5%88%B0%E5%B0%BE%EF%BC%8C%E6%AD%A5%E9%95%BF%E4%B8%BA%E4%B8%80">::</a><br>可以通过此方法反转哟<br>.replace(“来”,””)</p><p><strong>注意</strong>：mylist &#x3D; [1,2,3,5,7]<br>    mylist1 &#x3D; mylist<br>    ## 此时这两个名字都指向同一个list，del mylist1[0], 则mylist[0]也无了</p><p>所以，要拷贝，必须要切片。</p><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p>不可重复且无序，与前面三种相反；<br>用大括号</p><ol><li>定义空集合: myset &#x3D; set()</li><li>有除重功能，且无序。</li><li>添加新元素: myset.add(“nju”)  ## 若新元素已有，则不会加入</li><li>移除元素：myset.remove(“X”)</li><li>随机取出一个元素(这里不支持下标索引):.pop() ## 之后被取出的就不存在了</li><li>清空:.clear()</li><li>取出两个集合的差集：set3 &#x3D; set1.difference(set2)</li><li>消除两个集合的差集</li><li>集合合并：set3 &#x3D; set1.union(set2)</li><li>统计集合元素：len()</li><li>只能用for遍历</li></ol><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><p>mydic &#x3D; {key1:value1,key2:value2} ## (一对才算一个元素)<br>mydict &#x3D; {} 或 dict() (抢了空集合的定义)</p><p>字典不支持重复，不支持下标索引；只能借助key来索引</p><p>value &#x3D; dict[key]   利用key取出value<br>key不可以为字典，但value可以，所以可以嵌套<br>取出方法  dicr[][]</p><h4 id="字典操作"><a href="#字典操作" class="headerlink" title="字典操作"></a>字典操作</h4><ol><li>新增或更新元素：字典[key] &#x3D; value</li><li>删除元素：score &#x3D; my_dict.pop[Jay]</li><li>获取所有key：keys &#x3D; my_dict.keys()</li><li>遍历：1.for key in keys:<ol start="2"><li>for key in dict:</li></ol></li><li>统计元素数量：len（dict）</li></ol><h3 id="总结：数据容器的通用操作："><a href="#总结：数据容器的通用操作：" class="headerlink" title="总结：数据容器的通用操作："></a>总结：数据容器的通用操作：</h3><ol><li>遍历</li><li>len(), max(), min()<br>即使是字符串字符，也可以比较大小；字典输出key；</li><li>类型转换：<br>list(), str(), tuple(), set()<ul><li>转list: str会取出每一个字符，而字典只会保留key</li><li>转tuple；与转list相似</li><li>转string：直接在最外面加一个双引号（尽管并不会打印出来）</li><li>转set：字典只剩key，string会乱序</li></ul></li><li>排序：<br>mylist &#x3D; sorted(容器名)  ## 返回一个列表，且字典的value会去掉；<br>sorted(容器名，reverse &#x3D; True) ## 降序</li></ol><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><p>现在以UTF-8编码为主</p><h3 id="操作-1"><a href="#操作-1" class="headerlink" title="操作"></a>操作</h3><h4 id="打开"><a href="#打开" class="headerlink" title="打开"></a>打开</h4><p>f &#x3D; open(name,mode,encoding)<br>e.g.:f &#x3D; open(‘python.txt’,’r’,encoding &#x3D; ‘UTF-8’ )<br>mode:r 只读   w: 写入，从头开始；否则创建新文件   a:加到已有问题后；否则创建新文件。</p><h4 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h4><ul><li>read(num):有num则读取相应长度；无的话读全部；</li><li>readlines();读取全文，返回一个list，每个元素是一行内容（带’\n’）</li><li>readline()  一次读一行；<br>小心，文件一旦open开始的地方就是上次结束的地方<br>for line in f:<br>  print(line)</li></ul><h4 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h4><p>f.close()<br>否则程序执行时，该文件会被占用，无法打开</p><p>with open(codes) as f:<br>    for line in f:<br>        print(codes)<br>就不用close了</p><h4 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h4><h2 id="f-write-‘content’-f-flush-内容刷新（将内容从缓冲区写入硬盘）"><a href="#f-write-‘content’-f-flush-内容刷新（将内容从缓冲区写入硬盘）" class="headerlink" title="f.write(‘content’)f.flush(): 内容刷新（将内容从缓冲区写入硬盘）"></a>f.write(‘content’)<br>f.flush(): 内容刷新（将内容从缓冲区写入硬盘）</h2><h1 id="灌水区"><a href="#灌水区" class="headerlink" title="灌水区"></a>灌水区</h1><ol><li>写python题目时，注意是将结果返回还是输出；实在看不出就看下test文件！</li><li>python一次input就是输入一行，可以用spilt解决</li><li>注意数组的越界访问，可以加一个len（）的保护机制</li><li>一定以test文件为主！</li><li>冒泡就是交换的最小次数（相邻限制下）；看清题目，大的小的都在哪里</li></ol><p>6.单词统计题的坑：<br>首先是排序的sort()的用法；  ord(char):输出ASCII码的值; 关于字典的一些特性</p><p>7.贼偷屋子问题：初看不知道怎么做，其实可以用递归，优化一下就成为了动态规划（迭代）</p><p>8.初始化list：list&#x3D;[], list&#x3D;[0]*10, list&#x3D;[0 for i in range(10)]<br>  二维数组：list[list() for i in range(10)]</p><h2 id="机试前的挣扎"><a href="#机试前的挣扎" class="headerlink" title="机试前的挣扎"></a>机试前的挣扎</h2><p>修复了以下bug：</p><ol><li>print使用格式化输出，print(“content” % (num))，类似C语言，再也不用担心记不住了。  %d, %s, %f</li><li>数据容器的骚操作</li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux入门</title>
      <link href="/2024/08/30/%E9%BB%91%E9%A9%AClinux/"/>
      <url>/2024/08/30/%E9%BB%91%E9%A9%AClinux/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><hr><h3 id="安装Linux"><a href="#安装Linux" class="headerlink" title="安装Linux"></a>安装Linux</h3><ul><li>使用虚拟机：软件模拟了一个完整的计算机，Linux在其上面运行（主要以CentOS 或 Ubuntu）</li><li>使用WSL：Win10以上特有功能，直接在物理电脑上运行Linux</li></ul><p>虚拟机快照：相当于游戏的存档，方便回退。</p><h3 id="Linux操作"><a href="#Linux操作" class="headerlink" title="Linux操作"></a>Linux操作</h3><h4 id="Linux目录结构"><a href="#Linux目录结构" class="headerlink" title="Linux目录结构"></a>Linux目录结构</h4><p>Linux中只有一棵树，根目录：&#x2F;（斜杠）<br>而windows则有多棵树，用：\（反斜杠）</p><h4 id="Linux命令"><a href="#Linux命令" class="headerlink" title="Linux命令"></a>Linux命令</h4><ol><li><strong>命令行</strong>：<br>linux终端（terminal）；命令：一个linux操作指令，系统内置程序，以文字形式反馈结果</li><li><strong>基础格式</strong>：<br>command [-options] [parameter] ；本体，选项，参数</li><li><strong>ls命令</strong>：<br> 无参数时，平铺出当前工作目录下的所有文件<br> ls[-a(也列出隐藏文件，以.开头) -l(以列表展示更多信息) -h（与-l组合使用，更人性化现实文件大小）] [路径]； 组合使用: ls -l -a，等同于ls -la or -al；<br> HOME目录：&#x2F;home&#x2F;username</li><li><strong>cd命令</strong>：<br>cd更改工作目录，没参数就是去HOME路径；pwd（print work directory）输出当前工作路径</li><li><strong>路径</strong>：<br>绝对路径（以根目录为起点）与相对路径（以当前目录为起点）；<br>特殊路径符：<ul><li>. 表示当前目录，如cd.&#x2F;Desktop，但多可省略</li><li>.. 表上一级目录，cd ..</li><li>~ 表示home路径，cd ~</li></ul></li><li><strong>mkdir命令</strong>：<br>mkdir[-p（连续创建多层目录）] [新目录路径]  （在home目录外执行时，有可能有权限问题） </li><li><strong>文件操作</strong>：<br>创建文件：touch [路径]； Ctrl+l 清空文件；<br>查看文件：cat [路径] 和 more [路径] (支持翻页查看)；<br>复制文件或文件夹：cp [-r(复制文件夹时的递归复制)] 参数1（被复制的） 参数2（移动去的地方，包括复制后的新名字）<br>移动文件或文件夹：mv 要移动的 要去的地方（如不存在则相当于对原文件进行改名，记得在最后一级目录后加&#x2F;）<br>删除文件或文件夹：rm [-r（删除文件夹） -f（强制删除，一般root用户用）] 参数1 参数2 …(要删除的路径)； 通配符：<em>test（test结尾），test</em>（test开头），<em>test</em>（包含test）； 慎用rm -rf &#x2F;</li><li><strong>文件查找</strong>：<br>which：查找<em>命令</em>的程序文件在哪里<br>find：按文件名查找：find 起始路径 -name “被查找文件名”； 按文件大小查找：find &#x2F; -size -10k(查找小于10KB的文件)； find &#x2F; -size +100M; find &#x2F; -size +1G ;</li><li><strong>grep-wc-管道符</strong>：<br> grep：从文件中通过关键字过滤文件行； grep [-n（在结果中显示匹配的行号）]  “过滤的关键字”  文件路径or管道符的输入<br> wc：wc [-c(字节数) -m（字符数） -l（行数） -w（单词数）] 文件路径or管道符的输入； 不带选项时：行数，单词数，字节数；<br> 管道符|：将管道符左边命令的结果作为右边命令的输入</li></ol>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/08/18/hello-world/"/>
      <url>/2024/08/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
